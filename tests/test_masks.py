import pytest

from src.masks import get_mask_account, get_mask_card_number


@pytest.mark.parametrize(
    "card_number, exp",
    [
        (7000792289606361, "7000 79** **** 6361"),
        (70007922896063611, "Номер карты введен неверно.Введите 16 цифр Вашей карты"),
        ("qqqqqqqqqqqqqqqq", "Номер карты введен неверно.Введите 16 цифр Вашей карты, номер не может содержать буквы"),
        (" ", "Номер карты введен неверно.Введите 16 цифр Вашей карты, номер не может содержать буквы"),
        (None, "Номер карты введен неверно.Введите 16 цифр Вашей карты"),
    ],
)
def test_get_mask_card_number(card_number: int, exp: str) -> None:
    """Тест для функции get_mask_card_number:
    Тестирование правильности маскирования номера карты.
    Проверка работы функции на различных входных форматах номеров карт, включая граничные случаи
    и нестандартные длины номеров.
    Проверка, что функция корректно обрабатывает входные строки, где отсутствует номер карты."""

    assert get_mask_card_number(card_number) == exp


@pytest.mark.parametrize(
    "account_number, expected",
    [
        (73654108430135874305, "**4305"),
        (12373654108430135874305, "Номер счета введен неверно.Введите 20 цифр Вашей карты"),
        (74305, "Номер счета введен неверно.Введите 20 цифр Вашей карты"),
        (1, "Номер счета введен неверно.Введите 20 цифр Вашей карты"),
        (" ", "Номер счета введен неверно.Введите 20 цифр Вашего счета, номер не может содержать буквы"),
    ],
)
def test_get_mask_account(account_number: int, expected: str) -> None:
    """Тест для функции get_mask_account:
    Тестирование правильности маскирования номера счета.
    Проверка работы функции с различными форматами и длинами номеров счетов.
    Проверка, что функция корректно обрабатывает входные данные, где номер счета меньше ожидаемой длины."""

    assert get_mask_account(account_number) == expected
